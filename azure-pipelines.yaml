trigger: 
#  - main # none 
  branches:
    include:
      - main
      - feature/*

variables:
  - group: Terraform-Backend


stages:

# 1 BUILD STAGE
- stage: Build
  displayName: "Build Stage"
  jobs:
  - job: Build
    displayName: "Validate & Prepare Terraform Artifacts"
    steps:

    #  Run Commit Message Validation from External Script
    - script: |
        bash scripts/validate_commit.sh "$(Build.SourceVersionMessage)"
      displayName: "Validate Commit Message"
      workingDirectory: $(Build.SourcesDirectory)

    # Run Build Number Formatting from External Script
    - script: |
        bash scripts/set_build_number.sh
      displayName: "Set Build Number Format"  
      workingDirectory: $(Build.SourcesDirectory)
      
    # Install Terraform
    - task: TerraformInstaller@1
      displayName: "Install Terraform"
      inputs:
        terraformVersion: "latest"
     
    
    # erraform Initialization
    - task: TerraformTaskV4@4
      displayName: "Terraform Init"
      inputs:
        provider: "azurerm"
        command: "init"
        backendServiceArm: "GeneralServiceConnection"  # Use your Azure service connection
        backendAzureRmResourceGroupName: "$(TF_STATE_RESOURCE_GROUP)"
        backendAzureRmStorageAccountName: "$(TF_STATE_STORAGE_ACCOUNT)"
        backendAzureRmContainerName: "$(TF_STATE_CONTAINER)"
        backendAzureRmKey: "$(TF_STATE_KEY)"
      env:
        TF_LOG: DEBUG  # Enable debug logging

    # Terraform Format Check (fmt) 
    - script: |
        terraform fmt -check -recursive
      displayName: "Terraform Format Check"

    # Terraform Validation
    - task: TerraformTaskV4@4
      displayName: "Terraform Validate"
      inputs:
        provider: "azurerm"
        command: "validate"
      env:
        TF_LOG: DEBUG  

    # Archive & Upload Artifacts
    - script: zip -r iac.terraform.$(Build.BuildId).zip *
      displayName: "Create Terraform Artifact"

    - task: PublishBuildArtifacts@1
      displayName: "Upload Terraform Artifact"
      inputs:
        pathToPublish: "$(System.DefaultWorkingDirectory)/iac.terraform.$(Build.BuildId).zip"
        artifactName: "terraform-artifacts"


# 2️ TERRAFORM PLAN & APPLY STAGES for DEV
- stage: Terraform_DEV
  displayName: "Terraform Plan & Apply (DEV)"
  variables:
      - group: DEV-Environment
      - group: Azure-SQL-Database
  dependsOn: Build
  condition: succeeded()
  jobs:
  - deployment: Plan_DEV
    displayName: "Terraform Plan (DEV)"
    environment: DEV
    strategy:
      runOnce:
        deploy:              
          steps:
          - task: DownloadBuildArtifacts@0
            displayName: "Download Terraform Artifacts"
            inputs:
              artifactName: "terraform-artifacts"
              downloadPath: "$(Build.ArtifactStagingDirectory)"
          - script: unzip $(Build.ArtifactStagingDirectory)/terraform-artifacts/iac.terraform.$(Build.BuildId).zip -d $(System.DefaultWorkingDirectory)
            displayName: "Unzip Terraform Artifacts"

          # show the files in Working Dir
          - script: ls -R $(System.DefaultWorkingDirectory)
            displayName: "List Files in Working Directory"  

          - task: TerraformInstaller@1
            displayName: "Install Terraform"
            inputs:
              terraformVersion: "latest"

          - task: TerraformTaskV4@4 
            displayName: "Terraform Init"
            inputs:
              provider: "azurerm"
              command: "init"
              backendServiceArm: "GeneralServiceConnection"
              backendAzureRmResourceGroupName: "$(TF_STATE_RESOURCE_GROUP)"
              backendAzureRmStorageAccountName: "$(TF_STATE_STORAGE_ACCOUNT)"
              backendAzureRmContainerName: "$(TF_STATE_CONTAINER)"
              backendAzureRmKey: "$(DEV_TF_STATE_KEY)"
            env:
              TF_LOG: DEBUG    

          - task: TerraformTaskV4@4
            displayName: "Terraform Plan (DEV)"
            inputs:
              provider: "azurerm"
              command: "plan"
              environmentServiceNameAzureRM: "GeneralServiceConnection"     
              backendAzureRmResourceGroupName: "$(TF_STATE_RESOURCE_GROUP)"
              backendAzureRmStorageAccountName: "$(TF_STATE_STORAGE_ACCOUNT)"
              backendAzureRmContainerName: "$(TF_STATE_CONTAINER)"
              backendAzureRmKey: "$(DEV_TF_STATE_KEY)"  
              commandOptions: >
                -var "RESOURCE_NAME_PREFIX=$(RESOURCE_NAME_PREFIX)" 
                -var "LOCATION=$(LOCATION)" 
                -var "ENV=$(ENV)" 
                -var "SQL_SERVER_ADMINISTRATOR_LOGIN=$(SQL_ADMIN)" 
                -var "SQL_SERVER_ADMINISTRATOR_PASSWORD=$(SQL_PASSWORD)"  
            env: 
              TF_LOG: DEBUG      
 
  - job: waitForValidation
    displayName: Wait for external validation
    pool: server
    timeoutInMinutes: 4320 # job times out in 3 days
    steps:
    - task: ManualValidation@0
      timeoutInMinutes: 2880 # task times out in 2 day
      inputs:
        notifyUsers: "your-email@example.com" # define here mail
        instructions: 'Please validate the build configuration and resume'
        onTimeout: 'resume'

  - deployment: Apply_DEV
    displayName: "Terraform Apply (DEV)"
    dependsOn: waitForValidation
    environment: DEV
    strategy:
      runOnce:
        deploy:
          steps:
          - task: DownloadBuildArtifacts@0
            displayName: "Download Terraform Artifacts"
            inputs:
              artifactName: "terraform-artifacts"
              downloadPath: "$(Build.ArtifactStagingDirectory)"

          # Unzip the artifact to the working directory
          - script: unzip $(Build.ArtifactStagingDirectory)/terraform-artifacts/iac.terraform.$(Build.BuildId).zip -d $(System.DefaultWorkingDirectory)
            displayName: "Unzip Terraform Artifacts"

          # List files in the working directory
          - script: ls -R $(System.DefaultWorkingDirectory)
            displayName: "List Files in Working Directory"

          # Install Terraform
          - task: TerraformInstaller@1
            displayName: 'Install Terraform'
            inputs:
              terraformVersion: "latest"

          # Terraform Init
          - task: TerraformTaskV4@4
            displayName: 'Terraform Init'
            inputs:
              provider: 'azurerm'
              command: 'init'
              backendServiceArm: "GeneralServiceConnection"
              backendAzureRmResourceGroupName: "$(TF_STATE_RESOURCE_GROUP)"
              backendAzureRmStorageAccountName: "$(TF_STATE_STORAGE_ACCOUNT)"
              backendAzureRmContainerName: "$(TF_STATE_CONTAINER)"
              backendAzureRmKey: "$(DEV_TF_STATE_KEY)"
            env:
              TF_LOG: DEBUG 
          
          # terraform apply    
          - task: TerraformTaskV4@4
            displayName: "Terraform Apply (DEV)"
            inputs:
              provider: "azurerm"
              command: "apply"
              environmentServiceNameAzureRM: "GeneralServiceConnection"
              backendAzureRmResourceGroupName: "$(TF_STATE_RESOURCE_GROUP)"
              backendAzureRmStorageAccountName: "$(TF_STATE_STORAGE_ACCOUNT)"
              backendAzureRmContainerName: "$(TF_STATE_CONTAINER)"
              backendAzureRmKey: "$(DEV_TF_STATE_KEY)"
              commandOptions: >
                -var "RESOURCE_NAME_PREFIX=$(RESOURCE_NAME_PREFIX)" 
                -var "LOCATION=$(LOCATION)" 
                -var "ENV=$(ENV)" 
                -var "SQL_SERVER_ADMINISTRATOR_LOGIN=$(SQL_ADMIN)" 
                -var "SQL_SERVER_ADMINISTRATOR_PASSWORD=$(SQL_PASSWORD)"  
            env: 
              TF_LOG: DEBUG 


# 3 TERRAFORM PLAN & APPLY STAGES for QA
- stage: Terraform_QA
  displayName: "Terraform Plan & Apply (QA)"
  variables:
      - group: QA-Environment
      - group: Azure-SQL-Database
  dependsOn: Build
  condition: succeeded()
  jobs:
  - deployment: Plan_QA
    displayName: "Terraform Plan (QA)"
    environment: QA
    strategy:
      runOnce:
        deploy:              
          steps:
          - task: DownloadBuildArtifacts@0
            displayName: "Download Terraform Artifacts"
            inputs:
              artifactName: "terraform-artifacts"
              downloadPath: "$(Build.ArtifactStagingDirectory)"
          - script: unzip $(Build.ArtifactStagingDirectory)/terraform-artifacts/iac.terraform.$(Build.BuildId).zip -d $(System.DefaultWorkingDirectory)
            displayName: "Unzip Terraform Artifacts"

          # show the files in Working Dir
          - script: ls -R $(System.DefaultWorkingDirectory)
            displayName: "List Files in Working Directory"  

          - task: TerraformInstaller@1
            displayName: "Install Terraform"
            inputs:
              terraformVersion: "latest"

          - task: TerraformTaskV4@4  
            displayName: "Terraform Init"
            inputs:
              provider: "azurerm"
              command: "init"
              backendServiceArm: "GeneralServiceConnection"
              backendAzureRmResourceGroupName: "$(TF_STATE_RESOURCE_GROUP)"
              backendAzureRmStorageAccountName: "$(TF_STATE_STORAGE_ACCOUNT)"
              backendAzureRmContainerName: "$(TF_STATE_CONTAINER)"
              backendAzureRmKey: "$(QA_TF_STATE_KEY)"         
            env:
              TF_LOG: DEBUG    

          - task: TerraformTaskV4@4
            displayName: "Terraform Plan (QA)"
            inputs:
              provider: "azurerm"
              command: "plan"
              environmentServiceNameAzureRM: "GeneralServiceConnection"      
              backendAzureRmResourceGroupName: "$(TF_STATE_RESOURCE_GROUP)"
              backendAzureRmStorageAccountName: "$(TF_STATE_STORAGE_ACCOUNT)"
              backendAzureRmContainerName: "$(TF_STATE_CONTAINER)"
              backendAzureRmKey: "$(QA_TF_STATE_KEY)" 
              commandOptions: >
                -var "RESOURCE_NAME_PREFIX=$(RESOURCE_NAME_PREFIX)" 
                -var "LOCATION=$(LOCATION)" 
                -var "ENV=$(ENV)" 
                -var "SQL_SERVER_ADMINISTRATOR_LOGIN=$(SQL_ADMIN)" 
                -var "SQL_SERVER_ADMINISTRATOR_PASSWORD=$(SQL_PASSWORD)" 
            env:  
              TF_LOG: DEBUG      
 
  - job: waitForValidation
    displayName: Wait for external validation
    pool: server
    timeoutInMinutes: 4320 # job times out in 3 days
    steps:
    - task: ManualValidation@0
      timeoutInMinutes: 2880 # task times out in 2 day
      inputs:
        notifyUsers: "your-email@example.com" # define here mail
        instructions: 'Please validate the build configuration and resume'
        onTimeout: 'resume'

  - deployment: Apply_QA
    displayName: "Terraform Apply (QA)"
    dependsOn: waitForValidation
    environment: QA
    strategy:
      runOnce:
        deploy:
          steps:
          - task: DownloadBuildArtifacts@0
            displayName: "Download Terraform Artifacts"
            inputs:
              artifactName: "terraform-artifacts"
              downloadPath: "$(Build.ArtifactStagingDirectory)"

          # Unzip the artifact to the working directory
          - script: unzip $(Build.ArtifactStagingDirectory)/terraform-artifacts/iac.terraform.$(Build.BuildId).zip -d $(System.DefaultWorkingDirectory)
            displayName: "Unzip Terraform Artifacts"

          # List files in the working directory
          - script: ls -R $(System.DefaultWorkingDirectory)
            displayName: "List Files in Working Directory"

          # Terraform intall
          - task: TerraformInstaller@1
            displayName: 'Install Terraform'
            inputs:
              terraformVersion: "latest"
          
          - task: TerraformTaskV4@4  
            displayName: "Terraform Init"
            inputs:
              provider: "azurerm"
              command: "init"
              backendServiceArm: "GeneralServiceConnection"
              backendAzureRmResourceGroupName: "$(TF_STATE_RESOURCE_GROUP)"
              backendAzureRmStorageAccountName: "$(TF_STATE_STORAGE_ACCOUNT)"
              backendAzureRmContainerName: "$(TF_STATE_CONTAINER)"
              backendAzureRmKey: "$(QA_TF_STATE_KEY)"         
            env:
              TF_LOG: DEBUG  

          # terraform apply    
          - task: TerraformTaskV4@4
            displayName: "Terraform Apply (QA)"
            inputs:
              provider: "azurerm"
              command: "apply"
              environmentServiceNameAzureRM: "GeneralServiceConnection"              
              backendAzureRmResourceGroupName: "$(TF_STATE_RESOURCE_GROUP)"
              backendAzureRmStorageAccountName: "$(TF_STATE_STORAGE_ACCOUNT)"
              backendAzureRmContainerName: "$(TF_STATE_CONTAINER)"
              backendAzureRmKey: "$(QA_TF_STATE_KEY)"
              commandOptions: >
                -var "RESOURCE_NAME_PREFIX=$(RESOURCE_NAME_PREFIX)" 
                -var "LOCATION=$(LOCATION)" 
                -var "ENV=$(ENV)" 
                -var "SQL_SERVER_ADMINISTRATOR_LOGIN=$(SQL_ADMIN)" 
                -var "SQL_SERVER_ADMINISTRATOR_PASSWORD=$(SQL_PASSWORD)"  
            env: 
              TF_LOG: DEBUG     


# 4 TERRAFORM PLAN & APPLY STAGES for UAT
- stage: Terraform_UAT
  displayName: "Terraform Plan & Apply (UAT)"
  variables:
      - group: UAT-Environment
      - group: Azure-SQL-Database
  dependsOn: 
    - Terraform_DEV
    - Terraform_QA
  condition: succeeded()  
  jobs:
  - deployment: Plan_UAT
    displayName: "Terraform Plan (UAT)"
    environment: UAT
    strategy:
      runOnce:
        deploy:              
          steps:
          - task: DownloadBuildArtifacts@0
            displayName: "Download Terraform Artifacts"
            inputs:
              artifactName: "terraform-artifacts"
              downloadPath: "$(Build.ArtifactStagingDirectory)"
          - script: unzip $(Build.ArtifactStagingDirectory)/terraform-artifacts/iac.terraform.$(Build.BuildId).zip -d $(System.DefaultWorkingDirectory)
            displayName: "Unzip Terraform Artifacts"

          # show the files in Working Dir
          - script: ls -R $(System.DefaultWorkingDirectory)
            displayName: "List Files in Working Directory"  

          - task: TerraformInstaller@1
            displayName: "Install Terraform"
            inputs:
              terraformVersion: "latest"

          - task: TerraformTaskV4@4  
            displayName: "Terraform Init"
            inputs:
              provider: "azurerm"
              command: "init"
              backendServiceArm: "GeneralServiceConnection"
              backendAzureRmResourceGroupName: "$(TF_STATE_RESOURCE_GROUP)"
              backendAzureRmStorageAccountName: "$(TF_STATE_STORAGE_ACCOUNT)"
              backendAzureRmContainerName: "$(TF_STATE_CONTAINER)"
              backendAzureRmKey: "$(UAT_TF_STATE_KEY)"    
            env:  
              TF_LOG: DEBUG    

          - task: TerraformTaskV4@4
            displayName: "Terraform Plan (UAT)"
            inputs:
              provider: "azurerm"
              command: "plan"
              environmentServiceNameAzureRM: "GeneralServiceConnection"
              backendAzureRmResourceGroupName: "$(TF_STATE_RESOURCE_GROUP)"
              backendAzureRmStorageAccountName: "$(TF_STATE_STORAGE_ACCOUNT)"
              backendAzureRmContainerName: "$(TF_STATE_CONTAINER)"
              backendAzureRmKey: "$(UAT_TF_STATE_KEY)" 
              commandOptions: >
                -var "RESOURCE_NAME_PREFIX=$(RESOURCE_NAME_PREFIX)" 
                -var "LOCATION=$(LOCATION)" 
                -var "ENV=$(ENV)" 
                -var "SQL_SERVER_ADMINISTRATOR_LOGIN=$(SQL_ADMIN)" 
                -var "SQL_SERVER_ADMINISTRATOR_PASSWORD=$(SQL_PASSWORD)" 
            env: 
              TF_LOG: DEBUG      
 
  - job: waitForValidation
    displayName: Wait for external validation
    pool: server
    timeoutInMinutes: 4320 # job times out in 3 days
    steps:
    - task: ManualValidation@0
      timeoutInMinutes: 2880 # task times out in 2 day
      inputs:
        notifyUsers: "your-email@example.com" # define here mail
        instructions: 'Please validate the build configuration and resume'
        onTimeout: 'resume'

  - deployment: Apply_UAT
    displayName: "Terraform Apply (UAT)"
    dependsOn: waitForValidation
    environment: UAT
    strategy:
      runOnce:
        deploy:
          steps:
          - task: DownloadBuildArtifacts@0
            displayName: "Download Terraform Artifacts"
            inputs:
              artifactName: "terraform-artifacts"
              downloadPath: "$(Build.ArtifactStagingDirectory)"

          # Unzip the artifact to the working directory
          - script: unzip $(Build.ArtifactStagingDirectory)/terraform-artifacts/iac.terraform.$(Build.BuildId).zip -d $(System.DefaultWorkingDirectory)
            displayName: "Unzip Terraform Artifacts"

          # List files in the working directory
          - script: ls -R $(System.DefaultWorkingDirectory)
            displayName: "List Files in Working Directory"

           # Terraform intall
          - task: TerraformInstaller@1
            displayName: 'Install Terraform'
            inputs:
              terraformVersion: "latest"
          
          - task: TerraformTaskV4@4  
            displayName: "Terraform Init"
            inputs:
              provider: "azurerm"
              command: "init"
              backendServiceArm: "GeneralServiceConnection"
              backendAzureRmResourceGroupName: "$(TF_STATE_RESOURCE_GROUP)"
              backendAzureRmStorageAccountName: "$(TF_STATE_STORAGE_ACCOUNT)"
              backendAzureRmContainerName: "$(TF_STATE_CONTAINER)"
              backendAzureRmKey: "$(UAT_TF_STATE_KEY)"         
            env:
              TF_LOG: DEBUG 
          
          # terraform apply    
          - task: TerraformTaskV4@4
            displayName: "Terraform Apply (UAT)"
            inputs:
              provider: "azurerm"
              command: "apply"
              environmentServiceNameAzureRM: "GeneralServiceConnection"
              backendAzureRmResourceGroupName: "$(TF_STATE_RESOURCE_GROUP)"
              backendAzureRmStorageAccountName: "$(TF_STATE_STORAGE_ACCOUNT)"
              backendAzureRmContainerName: "$(TF_STATE_CONTAINER)"
              backendAzureRmKey: "$(UAT_TF_STATE_KEY)"
              commandOptions: >
                -var "RESOURCE_NAME_PREFIX=$(RESOURCE_NAME_PREFIX)" 
                -var "LOCATION=$(LOCATION)" 
                -var "ENV=$(ENV)" 
                -var "SQL_SERVER_ADMINISTRATOR_LOGIN=$(SQL_ADMIN)" 
                -var "SQL_SERVER_ADMINISTRATOR_PASSWORD=$(SQL_PASSWORD)"  
            env: 
              TF_LOG: DEBUG    


# 5 TERRAFORM PLAN & APPLY STAGES for PROD
- stage: Terraform_PROD
  displayName: "Terraform Plan & Apply (PROD)"
  variables:
      - group: PROD-Environment
      - group: Azure-SQL-Database
  dependsOn: Terraform_UAT
  condition: succeeded()  
  jobs:
  - deployment: Plan_PROD
    displayName: "Terraform Plan (PROD)"
    environment: PROD
    strategy:
      runOnce:
        deploy:              
          steps:
          - task: DownloadBuildArtifacts@0
            displayName: "Download Terraform Artifacts"
            inputs:
              artifactName: "terraform-artifacts"
              downloadPath: "$(Build.ArtifactStagingDirectory)"
          - script: unzip $(Build.ArtifactStagingDirectory)/terraform-artifacts/iac.terraform.$(Build.BuildId).zip -d $(System.DefaultWorkingDirectory)
            displayName: "Unzip Terraform Artifacts"

          # show the files in Working Dir
          - script: ls -R $(System.DefaultWorkingDirectory)
            displayName: "List Files in Working Directory"  

          - task: TerraformInstaller@1
            displayName: "Install Terraform"
            inputs:
              terraformVersion: "latest"

          - task: TerraformTaskV4@4  
            displayName: "Terraform Init"
            inputs:
              provider: "azurerm"
              command: "init"
              backendServiceArm: "GeneralServiceConnection"
              backendAzureRmResourceGroupName: "$(TF_STATE_RESOURCE_GROUP)"
              backendAzureRmStorageAccountName: "$(TF_STATE_STORAGE_ACCOUNT)"
              backendAzureRmContainerName: "$(TF_STATE_CONTAINER)"
              backendAzureRmKey: "$(PROD_TF_STATE_KEY)"       
            env: 
              TF_LOG: DEBUG    

          - task: TerraformTaskV4@4
            displayName: "Terraform Plan (PROD)"
            inputs:
              provider: "azurerm"
              command: "plan"
              environmentServiceNameAzureRM: "GeneralServiceConnection"   
              backendAzureRmResourceGroupName: "$(TF_STATE_RESOURCE_GROUP)"
              backendAzureRmStorageAccountName: "$(TF_STATE_STORAGE_ACCOUNT)"
              backendAzureRmContainerName: "$(TF_STATE_CONTAINER)"
              backendAzureRmKey: "$(PROD_TF_STATE_KEY)"  
              commandOptions: >
                -var "RESOURCE_NAME_PREFIX=$(RESOURCE_NAME_PREFIX)" 
                -var "LOCATION=$(LOCATION)" 
                -var "ENV=$(ENV)" 
                -var "SQL_SERVER_ADMINISTRATOR_LOGIN=$(SQL_ADMIN)" 
                -var "SQL_SERVER_ADMINISTRATOR_PASSWORD=$(SQL_PASSWORD)" 
            env: 
              TF_LOG: DEBUG      
 
  - job: waitForValidation
    displayName: Wait for external validation
    pool: server
    timeoutInMinutes: 4320 # job times out in 3 days
    steps:
    - task: ManualValidation@0
      timeoutInMinutes: 2880 # task times out in 2 day
      inputs:
        notifyUsers: "your-email@example.com" # define here mail
        instructions: 'Please validate the build configuration and resume'
        onTimeout: 'resume'

  - deployment: Apply_PROD
    displayName: "Terraform Apply (PROD)"
    dependsOn: waitForValidation
    environment: PROD
    strategy:
      runOnce:
        deploy:
          steps:
          - task: DownloadBuildArtifacts@0
            displayName: "Download Terraform Artifacts"
            inputs:
              artifactName: "terraform-artifacts"
              downloadPath: "$(Build.ArtifactStagingDirectory)"

          # Unzip the artifact to the working directory
          - script: unzip $(Build.ArtifactStagingDirectory)/terraform-artifacts/iac.terraform.$(Build.BuildId).zip -d $(System.DefaultWorkingDirectory)
            displayName: "Unzip Terraform Artifacts"

          # List files in the working directory
          - script: ls -R $(System.DefaultWorkingDirectory)
            displayName: "List Files in Working Directory"

          - task: TerraformInstaller@1
            displayName: "Install Terraform"
            inputs:
              terraformVersion: "latest"

          - task: TerraformTaskV4@4 
            displayName: "Terraform Init"
            inputs:
              provider: "azurerm"
              command: "init"
              backendServiceArm: "GeneralServiceConnection"
              backendAzureRmResourceGroupName: "$(TF_STATE_RESOURCE_GROUP)"
              backendAzureRmStorageAccountName: "$(TF_STATE_STORAGE_ACCOUNT)"
              backendAzureRmContainerName: "$(TF_STATE_CONTAINER)"
              backendAzureRmKey: "$(PROD_TF_STATE_KEY)"
            env:
              TF_LOG: DEBUG 
          
          # terraform apply    
          - task: TerraformTaskV4@4
            displayName: "Terraform Apply (PROD)"
            inputs:
              provider: "azurerm"
              command: "apply"
              environmentServiceNameAzureRM: "GeneralServiceConnection"
              backendAzureRmResourceGroupName: "$(TF_STATE_RESOURCE_GROUP)"
              backendAzureRmStorageAccountName: "$(TF_STATE_STORAGE_ACCOUNT)"
              backendAzureRmContainerName: "$(TF_STATE_CONTAINER)"
              backendAzureRmKey: "$(PROD_TF_STATE_KEY)"
              commandOptions: >
                -var "RESOURCE_NAME_PREFIX=$(RESOURCE_NAME_PREFIX)" 
                -var "LOCATION=$(LOCATION)" 
                -var "ENV=$(ENV)" 
                -var "SQL_SERVER_ADMINISTRATOR_LOGIN=$(SQL_ADMIN)" 
                -var "SQL_SERVER_ADMINISTRATOR_PASSWORD=$(SQL_PASSWORD)"  
            env:
              TF_LOG: DEBUG     
